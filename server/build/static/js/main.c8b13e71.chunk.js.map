{"version":3,"sources":["components/Map.js","components/RestaurantCards.js","components/List.js","components/InfoPage.js","serviceWorker.js","index.js","images/order-logo.svg"],"names":["mapStyles","position","width","height","CurrentLocation","props","getRestaurants","_","fetch","then","response","json","setState","restaurants","data","catch","err","console","error","initialCenter","lat","lng","state","currentLocation","prevProps","prevState","google","this","loadMap","recenterMap","map","current","maps","center","LatLng","panTo","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","mapRef","refs","node","ReactDOM","findDOMNode","zoom","mapConfig","Object","assign","Map","children","React","Children","c","cloneElement","mapCenter","style","ref","renderChildren","Component","defaultProps","visible","RestaurantCards","onMarkerClick","marker","e","selectedPlace","activeMarker","showingInfoWindow","search","name","log","addPoint","points","Latitude","Longitude","currentLocationClick","onClose","markers","searchHandler","bind","target","value","searchingFor","x","Name","toLowerCase","Address","City","includes","places","i","length","push","parseFloat","bounds","LatLngBounds","extend","time","undefined","indexOf","hour","substring","identifier","id","Menu","fixed","inverted","Container","Image","size","src","fflogo","marginRight","Input","icon","onChange","href","Icon","changeLocation","onClick","url","window","location","origin","filter","restaurant","key","RestrntID","Open","display","Card","Content","floated","rounded","Header","OnlineOrders","OrderWebsite","Button","basic","compact","color","Delivery","DeliveryWebsite","Fragment","Popup","trigger","fluid","content","Table","celled","collapsing","Body","Row","Cell","MondayOpen","MondayClose","TuesdayOpen","TuesdayClose","WednesdayOpen","WednesdayClose","ThursdayOpen","ThursdayClose","FridayOpen","FridayClose","SaturdayOpen","SaturdayClose","SundayOpen","SundayClose","on","wide","hideOnScroll","extra","className","Phone","flipped","Website","GoogleApiWrapper","apiKey","List","Info","as","Subheader","HeaderCell","colSpan","TableBody","TableRow","TableCell","Boolean","hostname","match","render","exact","path","component","document","getElementById","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.c8b13e71.chunk.js","sourcesContent":["import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nconst mapStyles = {\r\n  map: {\r\n    position: \"absolute\",\r\n    width: \"100vw\",\r\n    height: \"385px\",\r\n  },\r\n}\r\n\r\nexport class CurrentLocation extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    const { lat, lng } = this.props.initialCenter\r\n    this.state = {\r\n      currentLocation: {\r\n        lat: lat,\r\n        lng: lng,\r\n      },\r\n      restaurants: [],\r\n    }\r\n    // var markerBounds = new google.maps.LatLngBounds()\r\n  }\r\n\r\n  getRestaurants = (_) => {\r\n    fetch(\"/restaurants\")\r\n      .then((response) => response.json())\r\n      .then((response) => this.setState({ restaurants: response.data }))\r\n      .catch((err) => console.error(err))\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.google !== this.props.google) {\r\n      this.loadMap()\r\n    }\r\n    if (prevState.currentLocation !== this.state.currentLocation) {\r\n      this.recenterMap()\r\n    }\r\n  }\r\n\r\n  recenterMap(props) {\r\n    const map = this.map\r\n    const current = this.state.currentLocation\r\n\r\n    const google = this.props.google\r\n    const maps = google.maps\r\n\r\n    \r\n    if (map) {\r\n      let center = new maps.LatLng(current.lat, current.lng)\r\n      map.panTo(center)\r\n      // const restaurants = this.state.restaurants\r\n      // const places = []\r\n      // for (let i = 0; i < restaurants.length; i++) {\r\n      //   places.push({\r\n      //     lat: parseFloat(restaurants[i].Latitude),\r\n      //     lng: parseFloat(restaurants[i].Longitude),\r\n      //   })\r\n      // }\r\n      // var bounds = new this.props.google.maps.LatLngBounds()\r\n      // for (var i = 0; i < places.length; i++) {\r\n      //   bounds.extend(places[i])\r\n      // }\r\n      // map.fitBounds(bounds)\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRestaurants()\r\n    if (this.props.centerAroundCurrentLocation) {\r\n      if (navigator && navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition((pos) => {\r\n          const coords = pos.coords\r\n          this.setState({\r\n            currentLocation: {\r\n              lat: coords.latitude,\r\n              lng: coords.longitude,\r\n            },\r\n          })\r\n        })\r\n      }\r\n    }\r\n    this.loadMap()\r\n  }\r\n\r\n  loadMap() {\r\n    if (this.props && this.props.google) {\r\n      // checks if google is available\r\n      const { google } = this.props\r\n      const maps = google.maps\r\n\r\n      const mapRef = this.refs.map\r\n\r\n      // reference to the actual DOM element\r\n      const node = ReactDOM.findDOMNode(mapRef)\r\n\r\n      let { zoom } = this.props\r\n      const { lat, lng } = this.state.currentLocation\r\n      const center = new maps.LatLng(lat, lng)\r\n      const mapConfig = Object.assign(\r\n        {},\r\n        {\r\n          center: center,\r\n          zoom: zoom,\r\n        }\r\n      )\r\n\r\n      // maps.Map() is constructor that instantiates the map\r\n      this.map = new maps.Map(node, mapConfig)\r\n\r\n    }\r\n  }\r\n\r\n  renderChildren() {\r\n    const { children } = this.props\r\n\r\n    if (!children) return\r\n\r\n    return React.Children.map(children, (c) => {\r\n      if (!c) return\r\n      return React.cloneElement(c, {\r\n        map: this.map,\r\n        google: this.props.google,\r\n        mapCenter: this.state.currentLocation\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const style = Object.assign({}, mapStyles.map)\r\n    return (\r\n      <div>\r\n        <div style={style} ref=\"map\">\r\n          Loading map...\r\n          {this.renderChildren()}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default CurrentLocation\r\n\r\nCurrentLocation.defaultProps = {\r\n  zoom: 10,\r\n  initialCenter: {\r\n    lat: 40.974476,\r\n    lng: -81.485046,\r\n  },\r\n  centerAroundCurrentLocation: false,\r\n  visible: true\r\n}\r\n","import React, { Component } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\"\n\nimport CurrentLocation from \"./Map\"\n\nimport {\n  Button,\n  Card,\n  Image,\n  Input,\n  Icon,\n  List,\n  CardDescription,\n  Table,\n  Popup,\n  Header,\n  Divider,\n  Menu,\n  Container,\n} from \"semantic-ui-react\"\n\nimport fflogo from \"../images/order-logo.svg\"\n\nexport class RestaurantCards extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      restaurants: [],\n      search: \"\",\n      showingInfoWindow: false, //Hides or the shows the infoWindow\n      activeMarker: {}, //Shows the active marker upon click\n      selectedPlace: {}, //Shows the infoWindow to the selected place upon a marke\n      markers: {},\n      // I think this was working?\n      // newCenter: {\n      //   lat: -34,\n      //   lng: 151\n      // },\n    }\n\n    this.searchHandler = this.searchHandler.bind(this)\n  }\n  // getDistance (selectedMarker) {\n  //   var distance = new this.props.google.maps.computeDistanceBetween()\n  //   var userLocation = this.props.mapCenter\n  //   distance(selectedMarker, userLocation)\n  // }\n  onMarkerClick = (props, marker, e) => {\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true,\n      search: marker.name,\n    })\n    // getDistance(marker.position)\n    console.log(marker.position)\n  }\n\n  addPoint = () => {\n    this.setState((state) => {\n      return { points: { lat: state.Latitude, lng: state.Longitude } }\n    })\n  }\n\n  currentLocationClick = (props, marker, e) => {\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true,\n    })\n  }\n\n  onClose = (props) => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null,\n        search: \"\",\n      })\n    }\n  }\n\n  componentDidMount() {\n    this.getRestaurants()\n    console.log(this.props.google)\n  }\n\n  getRestaurants = (_) => {\n    fetch(\"/restaurants\")\n      .then((response) => response.json())\n      .then((response) => this.setState({ restaurants: response.data }))\n      .catch((err) => console.error(err))\n  }\n\n  searchHandler(e) {\n    this.setState({ search: e.target.value })\n  }\n\n  render() {\n    const restaurants = this.state.restaurants\n\n    function searchingFor(search) {\n      return function (x) {\n        let filteredRest =\n          x.Name.toLowerCase() + x.Address.toLowerCase() + x.City.toLowerCase()\n        return filteredRest.includes(search.toLowerCase()) || !search\n      }\n    }\n\n    //PLACES ARRAY\n\n    const places = []\n\n    // for (let i = 0; i < restaurants.length; i++) {\n    //   places.push(new this.props.google.maps.LatLng(restaurants[i].Latitude, restaurants[i].Longitude))\n    // }\n\n    // function without lat/lng\n    for (let i = 0; i < restaurants.length; i++) {\n      let place\n      places.push({\n        lat: parseFloat(restaurants[i].Latitude),\n        lng: parseFloat(restaurants[i].Longitude),\n      })\n    }\n    console.log(places)\n\n    var bounds = new this.props.google.maps.LatLngBounds()\n    for (var i = 0; i < places.length; i++) {\n      bounds.extend(places[i])\n    }\n    // bounds.extend()\n    // TIME CONVERTER\n    function time(value) {\n      if (value !== null && value !== undefined) {\n        //If value is passed in\n        if (value.indexOf(\"AM\") > -1 || value.indexOf(\"PM\") > -1) {\n          //If time is already in standard time then don't format.\n          return value\n        } else {\n          if (value.length == 8) {\n            //If value is the expected length for military time then process to standard time.\n            var hour = value.substring(0, 2) //Extract hour\n            var minutes = value.substring(3, 5) //Extract minutes\n            var identifier = \"AM\" //Initialize AM PM identifier\n\n            if (hour == 12) {\n              //If hour is 12 then should set AM PM identifier to PM\n              identifier = \"PM\"\n            }\n            if (hour == 0) {\n              //If hour is 0 then set to 12 for standard time 12 AM\n              hour = 12\n            }\n            if (hour > 12) {\n              //If hour is greater than 12 then convert to standard 12 hour format and set the AM PM identifier to PM\n              hour = hour - 12\n              identifier = \"PM\"\n            }\n            return hour + \":\" + minutes + \" \" + identifier //Return the constructed standard time\n          } else {\n            //If value is not the expected length than just return the value as is\n            return value\n          }\n        }\n      } else {\n        return \"Closed\"\n        // eventually function needs updated to take in both time values but whatever\n      }\n    }\n    return (\n      <div id=\"mainPage\">\n        <div id=\"nav\">\n          <Menu fixed=\"top\" inverted id=\"navBar\">\n            <Container>\n              <Image\n                size=\"mini\"\n                src={fflogo}\n                style={{ marginRight: \"1.5em\" }}\n                id=\"logo-image\"\n              />\n              <Input\n                icon=\"search\"\n                onChange={this.searchHandler}\n                value={this.state.search}\n                id=\"search-bar\"\n              ></Input>\n              <a href='/info'><Icon name=\"question circle outline\" id='questionCircle'></Icon></a>\n            </Container>\n          </Menu>\n        </div>\n        <div id=\"map\">\n          <CurrentLocation\n            centerAroundCurrentLocation\n            google={this.props.google}\n            changeLocation\n            //or maybe this was i'm not sure\n            // mapCenter={this.props.mapCenter}\n            bounds={bounds}\n            // fitBounds={bounds}\n          >\n            <Marker\n              onClick={this.currentLocationClick}\n              name={\"Your Location\"}\n              icon={{\n                url: window.location.origin + \"/images/Person.png\",\n              }}\n            />\n\n            {this.state.restaurants\n              .filter(searchingFor(this.state.search))\n              .map((restaurant) => (\n                <Marker\n                  onClick={this.onMarkerClick}\n                  key={restaurant.RestrntID}\n                  name={restaurant.Name}\n                  position={{\n                    lat: parseFloat(restaurant.Latitude),\n                    lng: parseFloat(restaurant.Longitude),\n                  }}\n                  icon={{\n                    url: window.location.origin + \"/images/chef-hat.png\",\n                  }}\n                >\n                  {/* {bounds.extend({\n                    lat: parseFloat(restaurant.Latitude),\n                    lng: parseFloat(restaurant.Longitude),\n                  })} */}\n                </Marker>\n              ))}\n\n            <InfoWindow\n              marker={this.state.activeMarker}\n              visible={this.state.showingInfoWindow}\n              onClose={this.onClose}\n            >\n              <div>\n                <h4>{this.state.selectedPlace.name}</h4>\n              </div>\n            </InfoWindow>\n          </CurrentLocation>\n        </div>\n        <div id=\"search-cards\">\n          <div id=\"cards-outer\">\n            <div id=\"cards\">\n              {this.state.restaurants\n                .filter(searchingFor(this.state.search))\n                .map((restaurant) => (\n                  <div\n                    key={restaurant.RestrntID}\n                    id=\"card\"\n                    style={\n                      restaurant.Open == \"N\"\n                        ? { display: \"none\" }\n                        : { display: \"grid\" }\n                    }\n                  >\n                    <Card.Content id=\"cardSection1\">\n                      <Image\n                        id=\"rImage\"\n                        floated=\"right\"\n                        size=\"medium\"\n                        src={\n                          window.location.origin +\n                          \"/images/\" +\n                          restaurant.RestrntID +\n                          \".jpg\"\n                        }\n                        rounded\n                        width=\"250px\"\n                        height=\"250px\"\n                      />\n                    </Card.Content>\n                    <div id=\"#cardText\">\n                    <Card.Content id=\"cardSection2\">\n                      <Header id=\"cardHeader\">{restaurant.Name}</Header>\n                        {restaurant.OnlineOrders == \"Y\" ? (\n                          <a href={restaurant.OrderWebsite} id=\"takeoutBtn\">\n                            <Button\n                              basic\n                              compact\n                              color=\"yellow\"\n                              id=\"takeoutBtn\"\n                            >\n                              Online Order \n                            </Button>\n                          </a>\n                        ) : (\n                          null\n                        )}\n                        {restaurant.Delivery == \"Y\" ? (\n                          <a href={restaurant.DeliveryWebsite} id=\"deliveryBtn\">\n                            <Button\n                              basic\n                              compact\n                              color=\"orange\"\n                              id=\"deliveryBtn\"\n                            >\n                              Delivery\n                            </Button>\n                          </a>\n                        ) : (\n                          null\n                        )}\n                    </Card.Content>\n\n                    <Card.Content id=\"cardSection3\">\n                      <React.Fragment>\n                        <Popup\n                          trigger={\n                            <Button basic fluid>\n                              Hours of Operation\n                            </Button>\n                          }\n                          content={\n                            <Table basic=\"very\" celled collapsing>\n                              <Table.Body>\n                                <Table.Row>\n                                  <Table.Cell>\n                                    Mon:{\" \"}\n                                    {\" \" +\n                                      time(restaurant.MondayOpen) +\n                                      \" - \" +\n                                      time(restaurant.MondayClose)}\n                                  </Table.Cell>\n                                </Table.Row>\n                                <Table.Row>\n                                  <Table.Cell>\n                                    Tues:{\" \"}\n                                    {\" \" +\n                                      time(restaurant.TuesdayOpen) +\n                                      \" - \" +\n                                      time(restaurant.TuesdayClose)}\n                                  </Table.Cell>\n                                </Table.Row>\n                                <Table.Row>\n                                  <Table.Cell>\n                                    Wed:{\" \"}\n                                    {\" \" +\n                                      time(restaurant.WednesdayOpen) +\n                                      \" - \" +\n                                      time(restaurant.WednesdayClose)}\n                                  </Table.Cell>\n                                </Table.Row>\n                                <Table.Row>\n                                  <Table.Cell>\n                                    Thurs:{\" \"}\n                                    {\" \" +\n                                      time(restaurant.ThursdayOpen) +\n                                      \" - \" +\n                                      time(restaurant.ThursdayClose)}\n                                  </Table.Cell>\n                                </Table.Row>\n                                <Table.Row>\n                                  <Table.Cell>\n                                    Fri:{\" \"}\n                                    {\" \" +\n                                      time(restaurant.FridayOpen) +\n                                      \" - \" +\n                                      time(restaurant.FridayClose)}\n                                  </Table.Cell>\n                                </Table.Row>\n                                <Table.Row>\n                                  <Table.Cell>\n                                    Sat:{\" \"}\n                                    {\" \" +\n                                      time(restaurant.SaturdayOpen) +\n                                      \" - \" +\n                                      time(restaurant.SaturdayClose)}\n                                  </Table.Cell>\n                                </Table.Row>\n                                <Table.Row>\n                                  <Table.Cell>\n                                    Sun:{\" \"}\n                                    {\" \" +\n                                      time(restaurant.SundayOpen) +\n                                      \" - \" +\n                                      time(restaurant.SundayClose)}\n                                  </Table.Cell>\n                                </Table.Row>\n                              </Table.Body>\n                            </Table>\n                          }\n                          on=\"click\"\n                          wide\n                          hideOnScroll\n                          position=\"right center\"\n                        />\n                      </React.Fragment>\n                    </Card.Content>\n\n                    <Card.Content extra id=\"cardSection4\">\n                      <div className=\"ui two buttons\">\n                        <a href={\"tel:\" + restaurant.Phone} className=\"callBtn\">\n                          <Button color=\"green\" id=\"call-btn\" fluid>\n                            <Icon\n                              flipped=\"horizontally\"\n                              name=\"call\"\n                              id=\"call\"\n                            ></Icon>\n                          </Button>\n                        </a>\n                        <a href={restaurant.Website} className=\"websiteBtn\">\n                          <Button color=\"blue\" id=\"website-btn\" fluid basic>\n                            Website\n                            {/* possibly a switch statement that loops through order site delivery site  */}\n                          </Button>\n                        </a>\n                      </div>\n                    </Card.Content>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCjjSs6symeoHC50P2kpo-vWn2Pow0YvYI&\",\n})(RestaurantCards)\n","import React, {Component} from 'react'\nimport RestaurantCards from \"./RestaurantCards\";\n \n \n \nclass List extends Component {\n  render() {\n    return (\n     \n        <div id=\"restaurant-list\">\n          <RestaurantCards></RestaurantCards>\n        </div>\n    );\n  }\n}\n \nexport default List;","import React from \"react\"\r\nimport {\r\n  Menu,\r\n  Container,\r\n  Image,\r\n  Icon,\r\n  Header,\r\n  Table,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n} from \"semantic-ui-react\"\r\nimport fflogo from \"../images/order-logo.svg\"\r\n\r\nclass Info extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id=\"infoPage\">\r\n        <div id=\"nav\">\r\n          <Menu fixed=\"top\" inverted id=\"navBar\">\r\n            <Container>\r\n              <a href=\"/\">\r\n                <Image\r\n                  size=\"mini\"\r\n                  src={fflogo}\r\n                  style={{ marginRight: \"1.5em\" }}\r\n                  id=\"logo-image\"\r\n                />\r\n              </a>\r\n\r\n              <Icon name=\"question circle outline\" id=\"questionCircle\"></Icon>\r\n            </Container>\r\n          </Menu>\r\n        </div>\r\n        <div id=\"header\">\r\n          <Header as=\"h2\" icon>\r\n            <Icon name=\"address card outline\" />\r\n            Order For Sure\r\n            <Header.Subheader>\r\n              Helping small business restaurants grow.\r\n            </Header.Subheader>\r\n          </Header>\r\n        </div>\r\n        <div id=\"text\">\r\n          <Table>\r\n            <Table.Header>\r\n              <Table.Row>\r\n                <Table.HeaderCell colSpan=\"3\">\r\n                  Additional Links\r\n                </Table.HeaderCell>\r\n              </Table.Row>\r\n            </Table.Header>\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell>\r\n                  Any questions regarding the information on the site, or other\r\n                  ideas can be sent to...\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Icon name=\"mail\" />\r\n                  <a href=\"mailto:Data@FortisureIT.com?Subject=OrderForSure%20Request\">\r\n                    data@fortisureit.com\r\n                  </a>\r\n                </TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>\r\n                  Visit our parent company, FortisureIT at...\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Icon name=\"users\" />\r\n                  <a href=\"http://fortisureit.com\">fortisureit.com</a>\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n        <div id='moreToCome'>\r\n        <Header as=\"h3\" icon>\r\n            <Icon name=\"code\" />\r\n            Coming Soon\r\n            <Header.Subheader>\r\n              The OrderForSure eCommerce Platform.\r\n            </Header.Subheader>\r\n          </Header>\r\n          <p>\r\n\r\n          </p>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Info\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport Navigation from \"./components/Navigation\";\nimport List from \"./components/List\";\nimport Footer from \"./components/Footer\";\nimport Info from './components/InfoPage'\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./CSS/Grid.css\";\nimport \"./CSS/Style.css\";\nimport \"./CSS/MediaQ.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <div id=\"index\">\n      <Switch>\n        <Route exact path=\"/\" component={List} />\n        <Route path=\"/info\" component={Info} />\n      </Switch>\n    </div>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/order-logo.e56c32c1.svg\";"],"sourceRoot":""}