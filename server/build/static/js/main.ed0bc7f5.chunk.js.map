{"version":3,"sources":["images/ff-logo.svg","images/eggs.jpg","components/Search.js","components/Home.js","components/Restaurant.js","components/List.js","components/Navigation.js","components/Footer.js","serviceWorker.js","index.js","images/two-women.jpg"],"names":["module","exports","initialState","isLoading","results","value","source","_","times","title","faker","company","companyName","description","catchPhrase","image","internet","avatar","price","finance","amount","SearchComponent","state","handleResultSelect","e","result","setState","handleSearchChange","setTimeout","length","re","RegExp","escapeRegExp","filter","test","this","Search","loading","onResultSelect","onSearchChange","debounce","leading","size","props","Component","Home","restaurants","getRestaurants","fetch","then","response","json","data","catch","err","console","error","renderRestaurant","RestrntID","City","key","href","Button","id","Header","as","textAlign","Icon","name","Content","Image","src","map","App","images","eggs","Name","Address","State","Zipcode","Phone","Website","OnlineOrders","DateAdded","OrderWebsite","Delivery","Card","floated","rounded","Meta","Description","extra","className","basic","color","Group","List","Restaurant","Navigation","Menu","fixed","inverted","Container","to","Item","header","fflogo","style","marginRight","Footer","Segment","Boolean","window","location","hostname","match","ReactDOM","render","path","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ed0bc7f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ff-logo.017ee789.svg\";","module.exports = __webpack_public_path__ + \"static/media/eggs.0f62ec0d.jpg\";","import _ from 'lodash'\r\nimport faker from 'faker'\r\nimport React, { Component } from 'react'\r\nimport { Search, Grid, Header, Segment } from 'semantic-ui-react'\r\n\r\nconst initialState = { isLoading: false, results: [], value: '' }\r\n\r\nconst source = _.times(5, () => ({\r\n  title: faker.company.companyName(),\r\n  description: faker.company.catchPhrase(),\r\n  image: faker.internet.avatar(),\r\n  price: faker.finance.amount(0, 100, 2, '$'),\r\n}))\r\n\r\nexport default class SearchComponent extends Component {\r\n  state = initialState\r\n\r\n  handleResultSelect = (e, { result }) => this.setState({ value: result.title })\r\n\r\n  handleSearchChange = (e, { value }) => {\r\n    this.setState({ isLoading: true, value })\r\n\r\n    setTimeout(() => {\r\n      if (this.state.value.length < 1) return this.setState(initialState)\r\n\r\n      const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\r\n      const isMatch = (result) => re.test(result.title)\r\n\r\n      this.setState({\r\n        isLoading: false,\r\n        results: _.filter(source, isMatch),\r\n      })\r\n    }, 300)\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, value, results } = this.state\r\n\r\n    return (\r\n    //   <Grid>\r\n    //     <Grid.Column width={6}>\r\n          <Search\r\n            loading={isLoading}\r\n            onResultSelect={this.handleResultSelect}\r\n            onSearchChange={_.debounce(this.handleSearchChange, 500, {\r\n              leading: true,\r\n            })}\r\n            results={results}\r\n            value={value}\r\n            size='huge'\r\n            {...this.props}\r\n          />)\r\n        {/* </Grid.Column>\r\n        <Grid.Column width={10}>\r\n          <Segment>\r\n            <Header>State</Header>\r\n            <pre style={{ overflowX: 'auto' }}>\r\n              {JSON.stringify(this.state, null, 2)}\r\n            </pre>\r\n            <Header>Options</Header>\r\n            <pre style={{ overflowX: 'auto' }}>\r\n              {JSON.stringify(source, null, 2)}\r\n            </pre>\r\n          </Segment>\r\n        </Grid.Column>\r\n      </Grid> */}\r\n    \r\n  }\r\n}\r\n","\r\nimport React, { Component } from \"react\"\r\nimport SearchComponent from \"./Search\"\r\n\r\nimport image from \"../images/two-women.jpg\"\r\n\r\nimport \"../CSS/Main.css\"\r\n\r\nimport { Header, Segment, Button, Icon, Grid, Image, Divider } from \"semantic-ui-react\"\r\n\r\n\r\nclass Home extends Component {\r\n\r\n    state = {\r\n        restaurants: []\r\n      }\r\n    \r\n      componentDidMount() {\r\n        this.getRestaurants()\r\n      }\r\n    \r\n      getRestaurants = _ => {\r\n        fetch('http://localhost:5000/server')\r\n        .then(response => response.json())\r\n        .then(response => this.setState({ restaurants: response.data }))\r\n        .catch(err => console.error(err));\r\n      }\r\n    \r\n      renderRestaurant = ({ RestrntID, City  }) => \r\n        \r\n      // NOTE: map through array of colors\r\n        <div key={RestrntID}> \r\n             <a href=\"/list\">\r\n                <Button size='massive' >\r\n                    {City}\r\n                </Button>\r\n            </a>\r\n        </div>\r\n    \r\n\r\n  render() {\r\n    const { restaurants } = this.state\r\n    return (\r\n      <div id=\"main\">\r\n\r\n              <Header id='main-header' as=\"h1\" textAlign=\"right\">\r\n                <div id='inner-header'>\r\n                  <Icon name=\"street view\" />\r\n                  <Header.Content>Welcome to Fortisure Foods</Header.Content>\r\n                </div>\r\n              </Header>\r\n\r\n              <SearchComponent id='search-bar'></SearchComponent>\r\n\r\n              <Image src={image} id='main-image'></Image>\r\n\r\n              <h2>Find your City!</h2>\r\n\r\n              <div id='cities'>\r\n                {restaurants.map(this.renderRestaurant)}\r\n              </div>\r\n              \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home","import React, { Component } from 'react';\nimport '../CSS/App.css';\n\nimport { Button, Card, Image } from 'semantic-ui-react'\nimport eggs from '../images/eggs.jpg'\nclass App extends Component {\n  \n  state = {\n    restaurants: [],\n    images: [\n      eggs,\n      \n    ]\n  }\n\n  componentDidMount() {\n    this.getRestaurants()\n  }\n\n  getRestaurants = _ => {\n    fetch('http://localhost:5000/server')\n    .then(response => response.json())\n    .then(response => this.setState({ restaurants: response.data }))\n    .catch(err => console.error(err));\n  }\n\n  renderRestaurant = ({   \n    RestrntID, Name, \n    Address, City, State, Zipcode, \n    Phone, Website, DateAdded, \n    OnlineOrders, OrderWebsite, Delivery \n  }) => \n    // NOTE: future add maybe an array of images that this maps through for each restaurnt\n    <Card key={RestrntID}>\n      <Card.Content>\n        <Image\n          floated='right'\n          size='medium'\n          src={eggs}\n          rounded\n        />\n      </Card.Content>\n      <Card.Content>\n      <Card.Header>{Name}</Card.Header>\n        <Card.Meta>{Phone}</Card.Meta>\n        <Card.Description>\n          Located at {Address}, {City}, {State}, {Zipcode} \n        </Card.Description>\n      </Card.Content>\n      <Card.Content>\n      <Card.Meta></Card.Meta>\n      <Card.Meta>Online Orders: { OnlineOrders}</Card.Meta>\n      <Card.Meta>Delivery: { Delivery}</Card.Meta>\n      </Card.Content>\n      <Card.Content extra>\n        <div className='ui two buttons'>\n          <Button basic color='green' >\n          <a href={Website} className='websiteBtn'>Website</a>\n          </Button>\n          <Button basic color='red'>\n            <a href={OrderWebsite} className='orderBtn'>Order Now!</a>\n            </Button>\n        </div>\n      </Card.Content>\n    </Card>\n\n  render() {\n    const { restaurants } = this.state\n    \n    const changeText = (e) => {\n      if (e === 'Y') {\n        return 'Yes'\n      } else {\n        return 'no'\n      }\n    }\n    return (\n      \n      <div className=\"App\">\n        <Card.Group>\n          {restaurants.map(this.renderRestaurant)}\n        </Card.Group>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\"\r\nimport Restaurant from \"./Restaurant\"\r\nimport SearchComponent from \"./Search\"\r\n\r\nimport image from \"../images/two-women.jpg\"\r\n\r\nimport \"../CSS/Main.css\"\r\n\r\nimport { Header, Segment, Button, Icon, Grid, Image, Divider } from \"semantic-ui-react\"\r\n\r\nclass List extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <div id=\"main\">\r\n\r\n              <Header id='main-header' as=\"h1\" textAlign=\"right\">\r\n                <div id='inner-header'>\r\n                  <Icon name=\"street view\" />\r\n                  <Header.Content>Welcome to Fortisure Foods</Header.Content>\r\n                </div>\r\n              </Header>\r\n\r\n              <SearchComponent id='search-bar'></SearchComponent>\r\n\r\n              <Image src={image} id='main-image'></Image>\r\n            \r\n              <h2>Order your food now!</h2>\r\n              <div id='restaurant-list'>\r\n                <Restaurant></Restaurant>\r\n              </div>\r\n              \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default List\r\n","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\n\r\nimport fflogo from \"../images/ff-logo.svg\"\r\n\r\nimport {\r\n  Container,\r\n  Divider,\r\n  Dropdown,\r\n  Grid,\r\n  Header,\r\n  Image,\r\n  Menu\r\n} from \"semantic-ui-react\"\r\n\r\nimport Home from \"./Home\"\r\nimport List from \"./List\"\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <div id=\"nav\">\r\n      <Menu fixed=\"top\" inverted>\r\n        <Container>\r\n          <NavLink to=\"/\">\r\n            <Menu.Item as=\"a\" header>\r\n              <Image\r\n                size=\"mini\"\r\n                src={fflogo}\r\n                style={{ marginRight: \"1.5em\" }}\r\n                id=\"logo-image\"\r\n              />\r\n              FortisureFoods\r\n            </Menu.Item>\r\n          </NavLink>\r\n          <NavLink to=\"/list\">\r\n            <Menu.Item as=\"a\" id=\"right-nav\">\r\n              List\r\n            </Menu.Item>\r\n          </NavLink>\r\n\r\n          {/* <Dropdown item simple text=\"Dropdown\">\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item>List Item</Dropdown.Item>\r\n              <Dropdown.Item>List Item</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <Dropdown.Header>Header Item</Dropdown.Header>\r\n              <Dropdown.Item>\r\n                <i className=\"dropdown icon\" />\r\n                <span className=\"text\">Submenu</span>\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item>List Item</Dropdown.Item>\r\n                  <Dropdown.Item>List Item</Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item>List Item</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown> */}\r\n        </Container>\r\n      </Menu>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navigation\r\n","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\n\r\nimport fflogo from \"../images/ff-logo.svg\"\r\n\r\nimport {\r\n  Segment,\r\n} from \"semantic-ui-react\"\r\n\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div id=\"footer\">\r\n        <Segment color='black'>\r\n            <div id='inner-footer'>\r\n                <h5>Fortisure IT</h5>\r\n                <h5>Work With Us</h5>\r\n                <p>Why we do it</p>\r\n                <p>© 2020 fortisurefoods.com All Rights Reserved</p>\r\n            </div>\r\n        \r\n        </Segment>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport Navigation from './components/Navigation'\nimport List from './components/List';\nimport Home from './components/Home';\nimport Footer from \"./components/Footer\"\n\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render((\n\n    <BrowserRouter>\n        <div>\n          <Navigation />\n          <Switch>\n            <Route path=\"/\" component={Home} exact />\n            <Route path=\"/list\" component={List} />\n          </Switch>\n          <Footer></Footer>\n        </div>\n      </BrowserRouter>\n\n), document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/two-women.bf825e80.jpg\";"],"sourceRoot":""}