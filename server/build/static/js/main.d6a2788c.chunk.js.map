{"version":3,"sources":["images/ff-logo.svg","images/eggs.jpg","images/map.png","images/two-women.jpg","components/Map.js","components/RestaurantCards.js","components/List.js","components/Home.js","components/Footer.js","serviceWorker.js","index.js"],"names":["module","exports","mapStyles","position","width","height","CurrentLocation","props","initialCenter","lat","lng","state","currentLocation","prevProps","prevState","google","this","loadMap","recenterMap","map","current","maps","center","LatLng","panTo","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","mapRef","refs","node","ReactDOM","findDOMNode","zoom","mapConfig","Object","assign","Map","children","React","Children","c","cloneElement","mapCenter","style","ref","renderChildren","Component","defaultProps","visible","RestaurantCards","onMarkerClick","marker","e","selectedPlace","activeMarker","showingInfoWindow","onClose","getRestaurants","_","fetch","then","response","json","restaurants","data","catch","err","console","error","hours","search","searchHandler","bind","target","value","searchingFor","x","Name","toLowerCase","Address","City","includes","time","undefined","indexOf","length","hour","substring","identifier","id","Menu","fixed","inverted","Container","Image","size","src","fflogo","marginRight","Input","icon","onChange","onClick","name","filter","restaurant","key","RestrntID","parseFloat","Latitude","Longitude","Card","Content","floated","window","location","origin","rounded","Header","Meta","Icon","OnlineOrders","DeliveryOrders","item","title","expanded","Fragment","Popup","trigger","Button","basic","fluid","content","Table","celled","collapsing","Body","Row","Cell","MondayOpen","MondayClose","TuesdayOpen","TuesdayClose","WednesdayOpen","WednesdayClose","ThursdayOpen","ThursdayClose","FridayOpen","FridayClose","SaturdayOpen","SaturdayClose","SundayOpen","SundayClose","on","wide","hideOnScroll","Description","Group","href","DeliveryWebsite","compact","color","OrderWebsite","Item","State","Zipcode","extra","className","Phone","flipped","Website","GoogleApiWrapper","apiKey","List","Home","renderRestaurant","onLoad","colorChanger","as","textAlign","Footer","Segment","Boolean","hostname","match","render","path","component","exact","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d6a2788c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ff-logo.b514f7a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/eggs.0f62ec0d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/map.abe22478.png\";","module.exports = __webpack_public_path__ + \"static/media/two-women.bf825e80.jpg\";","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nconst mapStyles = {\r\n  map: {\r\n    position: \"absolute\",\r\n    width: \"100vw\",\r\n    height: \"385px\",\r\n  },\r\n}\r\n\r\nexport class CurrentLocation extends React.Component {\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.google !== this.props.google) {\r\n      this.loadMap()\r\n    }\r\n    if (prevState.currentLocation !== this.state.currentLocation) {\r\n      this.recenterMap()\r\n    }\r\n  }\r\n\r\n  recenterMap() {\r\n    const map = this.map\r\n    const current = this.state.currentLocation\r\n\r\n    const google = this.props.google\r\n    const maps = google.maps\r\n\r\n    if (map) {\r\n      let center = new maps.LatLng(current.lat, current.lng)\r\n      map.panTo(center)\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.centerAroundCurrentLocation) {\r\n      if (navigator && navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(pos => {\r\n          const coords = pos.coords;\r\n          this.setState({\r\n            currentLocation: {\r\n              lat: coords.latitude,\r\n              lng: coords.longitude\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n    this.loadMap();\r\n  }\r\n\r\n  loadMap() {\r\n    if (this.props && this.props.google) {\r\n      // checks if google is available\r\n      const { google } = this.props;\r\n      const maps = google.maps;\r\n\r\n      const mapRef = this.refs.map;\r\n\r\n      // reference to the actual DOM element\r\n      const node = ReactDOM.findDOMNode(mapRef);\r\n\r\n      let { zoom } = this.props;\r\n      const { lat, lng } = this.state.currentLocation;\r\n      const center = new maps.LatLng(lat, lng);\r\n      const mapConfig = Object.assign(\r\n        {},\r\n        {\r\n          center: center,\r\n          zoom: zoom\r\n        }\r\n      );\r\n\r\n      // maps.Map() is constructor that instantiates the map\r\n      this.map = new maps.Map(node, mapConfig);\r\n    }\r\n  }\r\n\r\n  renderChildren() {\r\n    const { children } = this.props;\r\n\r\n    if (!children) return;\r\n\r\n    return React.Children.map(children, c => {\r\n      if (!c) return;\r\n      return React.cloneElement(c, {\r\n        map: this.map,\r\n        google: this.props.google,\r\n        mapCenter: this.state.currentLocation\r\n      });\r\n    });\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    const { lat, lng } = this.props.initialCenter\r\n    this.state = {\r\n      currentLocation: {\r\n        lat: lat,\r\n        lng: lng,\r\n      },\r\n    }\r\n  }\r\n\r\nrender() {\r\n    const style = Object.assign({}, mapStyles.map);\r\n   return (\r\n     <div>\r\n       <div style={style} ref=\"map\">\r\n         Loading map...\r\n       </div>\r\n       {this.renderChildren()}\r\n     </div>\r\n   );\r\n }\r\n \r\n}\r\nexport default CurrentLocation\r\n\r\nCurrentLocation.defaultProps = {\r\n  zoom: 14,\r\n  initialCenter: {\r\n    lat: 40.974476,\r\n    lng: -81.485046,\r\n  },\r\n  centerAroundCurrentLocation: false,\r\n  visible: true,\r\n}\r\n","import React, { Component } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Accordion, AccordionItem } from \"react-sanfona\"\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\"\n\nimport CurrentLocation from \"./Map\"\n\nimport {\n  Button,\n  Card,\n  Image,\n  Input,\n  Icon,\n  List,\n  CardDescription,\n  Table,\n  Popup,\n  Header,\n  Divider,\n  Menu,\n  Container,\n} from \"semantic-ui-react\"\n\nimport fflogo from \"../images/ff-logo.svg\"\nimport eggs from \"../images/eggs.jpg\"\n\nexport class RestaurantCards extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      restaurants: [],\n      hours: [],\n      search: \"\",\n      showingInfoWindow: false, //Hides or the shows the infoWindow\n      activeMarker: {}, //Shows the active marker upon click\n      selectedPlace: {}, //Shows the infoWindow to the selected place upon a marke\n    }\n\n    this.searchHandler = this.searchHandler.bind(this)\n  }\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true,\n    })\n\n  onClose = (props) => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null,\n      })\n    }\n  }\n  componentDidMount() {\n    this.getRestaurants()\n  }\n\n  getRestaurants = (_) => {\n    fetch(\"/restaurants\")\n      .then((response) => response.json())\n      .then((response) => this.setState({ restaurants: response.data }))\n      .catch((err) => console.error(err))\n  }\n\n  searchHandler(e) {\n    this.setState({ search: e.target.value })\n    \n  }\n\n  // function searchingFor(search) {\n  //   return function (x) {\n  //     return x.Name.toLowerCase().includes(search.toLowerCase()) || !search\n  //   }\n  // }\n\n  render() {\n    function searchingFor(search) {\n      return function (x) {\n          let filteredRest = x.Name.toLowerCase() + x.Address.toLowerCase() + x.City.toLowerCase()\n        return filteredRest.includes(search.toLowerCase()) || !search\n          \n          \n      } \n      \n    }\n\n    // const bounds = new this.props.google.maps.LatLngBounds()\n    // for (var i = 0; i < this.state.restaurants.length; i++) {\n    //   bounds.extend({\n    //     lat: parseFloat(this.state.restaurants.Latitude),\n    //     lng: parseFloat(this.state.restaurants.Longitude),\n    //   })\n    // }\n\n    // TIME CONVERTER\n    function time(value) {\n      if (value !== null && value !== undefined){ //If value is passed in\n        if(value.indexOf('AM') > -1 || value.indexOf('PM') > -1){ //If time is already in standard time then don't format.\n          return value;\n        }\n        else {\n          if(value.length == 8){ //If value is the expected length for military time then process to standard time.\n            var hour = value.substring ( 0,2 ); //Extract hour\n            var minutes = value.substring ( 3,5 ); //Extract minutes\n            var identifier = 'AM'; //Initialize AM PM identifier\n     \n            if(hour == 12){ //If hour is 12 then should set AM PM identifier to PM\n              identifier = 'PM';\n            }\n            if(hour == 0){ //If hour is 0 then set to 12 for standard time 12 AM\n              hour=12;\n            }\n            if(hour > 12){ //If hour is greater than 12 then convert to standard 12 hour format and set the AM PM identifier to PM\n              hour = hour - 12;\n              identifier='PM';\n            }\n            return hour + ':' + minutes + ' ' + identifier; //Return the constructed standard time\n          }\n          else { //If value is not the expected length than just return the value as is\n            return value;\n          }\n        }\n      } else {\n        return 'Closed'\n        // eventually function needs updated to take in both time values but whatever\n      }\n    };\n    return (\n      <div id=\"mainPage\">\n        <div id=\"nav\">\n          <Menu fixed=\"top\" inverted id=\"navBar\">\n            <Container>\n              <Image\n                size=\"mini\"\n                src={fflogo}\n                style={{ marginRight: \"1.5em\" }}\n                id=\"logo-image\"\n              />\n              <Input\n                icon=\"search\"\n                onChange={this.searchHandler}\n                value={this.state.search}\n                id=\"search-bar\"\n              ></Input>\n            </Container>\n          </Menu>\n        </div>\n        <div id=\"map\">\n          <CurrentLocation\n            centerAroundCurrentLocation\n            google={this.props.google}\n          >\n            <Marker onClick={this.onMarkerClick} name={\"current location\"} />\n\n            {this.state.restaurants\n              .filter(searchingFor(this.state.search))\n              .map((restaurant) => (\n                <Marker\n                  onClick={this.onMarkerClick}\n                  key={restaurant.RestrntID}\n                  name={restaurant.Name}\n                  position={{\n                    lat: parseFloat(restaurant.Latitude),\n                    lng: parseFloat(restaurant.Longitude),\n                  }}\n                />\n              ))}\n\n            <InfoWindow\n              marker={this.state.activeMarker}\n              visible={this.state.showingInfoWindow}\n              onClose={this.onClose}\n            >\n              <div>\n                <h4>{this.state.selectedPlace.name}</h4>\n              </div>\n            </InfoWindow>\n          </CurrentLocation>\n        </div>\n        <div id=\"search-cards\">\n          <div id=\"cards-outer\">\n            <div id=\"cards\">\n              {this.state.restaurants\n                .filter(searchingFor(this.state.search))\n                .map((restaurant) => (\n                  <div key={restaurant.RestrntID} id=\"card\">\n                    <Card.Content id=\"cardSection1\">\n                      <Image\n                        id=\"rImage\"\n                        floated=\"right\"\n                        size=\"medium\"\n                        src={\n                          window.location.origin +\n                          \"/images/\" +\n                          restaurant.RestrntID +\n                          \".jpg\"\n                        }\n                        rounded\n                        width=\"250px\"\n                        height=\"250px\"\n                      />\n                    </Card.Content>\n\n                    <Card.Content id=\"cardSection2\">\n                      <Header id=\"cardHeader\">{restaurant.Name}</Header>\n                      <Card.Meta>\n                        <span>\n                          Takeout:{\" \"}\n                          <Icon\n                            name={\n                              restaurant.OnlineOrders == \"Y\" ? \"check\" : \"close\"\n                            }\n                          ></Icon>\n                        </span>\n                        <span>\n                          Delivery:{\" \"}\n                          <Icon\n                            name={\n                              restaurant.DeliveryOrders == \"Y\"\n                                ? \"check\"\n                                : \"close\"\n                            }\n                          ></Icon>\n                        </span>\n                        {/* <span>Open Now: Y</span> FUTURE VERSION*/}\n                      </Card.Meta>\n                    </Card.Content>\n\n                    <Card.Content id=\"cardSection3\">\n                      <Accordion>\n                        {[0].map((item) => {\n                          return (\n                            <AccordionItem\n                              title={\"More Information  ←\"}\n                              expanded={item === 2}\n                            >\n                              <div>\n                                <React.Fragment>\n                                  <Popup\n                                    trigger={\n                                      <Button basic fluid>\n                                        Hours of Operation\n                                      </Button>\n                                    }\n                                    content={\n                                      <Table basic=\"very\" celled collapsing>\n                                        <Table.Body>\n                                          <Table.Row>\n                                            <Table.Cell>\n                                              Mon: {\" \" + time(restaurant.MondayOpen) + ' - ' + time(restaurant.MondayClose)}\n                                            </Table.Cell>\n                                          </Table.Row>\n                                          <Table.Row>\n                                            <Table.Cell>\n                                              Tues: {\" \" + time(restaurant.TuesdayOpen) + ' - ' + time(restaurant.TuesdayClose)}\n                                            </Table.Cell>\n                                          </Table.Row>\n                                          <Table.Row>\n                                            <Table.Cell>\n                                              Wed: {\" \" + time(restaurant.WednesdayOpen) + ' - ' + time(restaurant.WednesdayClose)}\n                                            </Table.Cell>\n                                          </Table.Row>\n                                          <Table.Row>\n                                            <Table.Cell>\n                                              Thurs: {\" \" + time(restaurant.ThursdayOpen) + ' - ' + time(restaurant.ThursdayClose)}\n                                            </Table.Cell>\n                                          </Table.Row>\n                                          <Table.Row>\n                                            <Table.Cell>\n                                              Fri: {\" \" + time(restaurant.FridayOpen) + ' - ' + time(restaurant.FridayClose)}\n                                            </Table.Cell>\n                                          </Table.Row>\n                                          <Table.Row>\n                                            <Table.Cell>\n                                              Sat: {\" \" + time(restaurant.SaturdayOpen) + ' - ' + time(restaurant.SaturdayClose)}\n                                            </Table.Cell>\n                                          </Table.Row>\n                                          <Table.Row>\n                                            <Table.Cell>\n                                              Sun: {\" \" + time(restaurant.SundayOpen) + ' - ' + time(restaurant.SundayClose)}\n                                            </Table.Cell>\n                                          </Table.Row>\n                                        </Table.Body>\n                                      </Table>\n                                    }\n                                    on=\"click\"\n                                    wide\n                                    hideOnScroll\n                                    position=\"right center\"\n                                  />\n                                </React.Fragment>\n                                <Card.Description>\n                                  <Button.Group fluid>\n                                    <a\n                                      href={restaurant.DeliveryWebsite}\n                                      id=\"deliveryBtn\"\n                                    >\n                                      <Button\n                                        basic\n                                        compact\n                                        color=\"orange\"\n                                        id=\"deliveryBtn\"\n                                      >\n                                        Delivery\n                                      </Button>\n                                    </a>\n                                    <a\n                                      href={restaurant.OrderWebsite}\n                                      id=\"takeoutBtn\"\n                                    >\n                                      <Button\n                                        basic\n                                        compact\n                                        color=\"yellow\"\n                                        id=\"takeoutBtn\"\n                                      >\n                                        Takeout\n                                      </Button>\n                                    </a>\n                                  </Button.Group>\n                                </Card.Description>\n                                <List>\n                                  <List.Item\n                                    icon=\"marker\"\n                                    content={\n                                      restaurant.Address +\n                                      \", \" +\n                                      restaurant.City +\n                                      \", \" +\n                                      restaurant.State +\n                                      \" \" +\n                                      restaurant.Zipcode\n                                    }\n                                  />\n                                </List>\n                              </div>\n                            </AccordionItem>\n                          )\n                        })}\n                      </Accordion>\n                    </Card.Content>\n\n                    <Card.Content extra id=\"cardSection4\">\n                      <div className=\"ui two buttons\">\n                        <a href={\"tel:\" + restaurant.Phone} className=\"callBtn\">\n                          <Button color=\"green\" id=\"call-btn\" fluid>\n                            <Icon\n                              flipped=\"horizontally\"\n                              name=\"call\"\n                              id=\"call\"\n                            ></Icon>\n                          </Button>\n                        </a>\n                        <a href={restaurant.Website} className=\"websiteBtn\">\n                          <Button color=\"blue\" id=\"website-btn\" fluid basic>\n                            Website\n                            {/* possibly a switch statement that loops through order site delivery site  */}\n                          </Button>\n                        </a>\n                      </div>\n                    </Card.Content>\n                  </div>\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCjjSs6symeoHC50P2kpo-vWn2Pow0YvYI&\",\n})(RestaurantCards)\n","import React, {Component} from 'react'\nimport RestaurantCards from \"./RestaurantCards\";\nimport image from \"../images/map.png\";\nimport {\n  GoogleMap,\n  withScriptjs,\n  withGoogleMap,\n  Marker,\n} from \"react-google-maps\";\nimport * as restData from \"../data/restaurants.json\";\n \nimport { Header, Icon, Image } from \"semantic-ui-react\";\n \n \nclass List extends Component {\n  render() {\n    return (\n     \n        <div id=\"restaurant-list\">\n          <RestaurantCards></RestaurantCards>\n        </div>\n    );\n  }\n}\n \nexport default List;","import React, { Component } from \"react\"\n\nimport image from \"../images/two-women.jpg\"\n\nimport { Header, Button, Icon, Image } from \"semantic-ui-react\"\n\nclass Home extends Component {\n  state = {\n    restaurants: [],\n    color: ''\n  }\n\n  componentDidMount() {\n    this.getRestaurants()\n  }\n\n  getRestaurants = _ => {\n    fetch(\"/server\")\n      .then(response => response.json())\n      .then(response => this.setState({ restaurants: response.data }))\n      .catch(err => console.error(err))\n  }\n\n  // colorChange = (key) => {\n  //   Math.floor((Math.random() * 100))\n  // }\n\n  renderRestaurant = ({ RestrntID, City }) => (\n    // NOTE: map through array of colors\n    <div key={RestrntID} onLoad={this.colorChanger}>\n      <a href=\"/list\">\n        <Button size=\"massive\">{City}</Button>\n      </a>\n    </div>\n  )\n\n  render() {\n    const { restaurants } = this.state\n    return (\n      <div id=\"home\">\n        <header>\n          <Header id=\"main-header\" as=\"h1\" textAlign=\"right\">\n            <div id=\"inner-header\">\n              <Icon name=\"street view\" />\n              <Header.Content>Welcome to Fortisure Foods</Header.Content>\n            </div>\n          </Header>\n        </header>\n        <h3>This our site to show you our favorite restaurants</h3>\n        <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto.</p>\n        <h3>Find your City!</h3>\n\n        <div id=\"cities\">\n          <div>\n            <a href=\"/list\" key='1' onLoad=''>\n              <Button size=\"massive\">Sample City</Button>\n            </a>\n          </div>\n          <div>\n            <a href=\"/list\" key='2'>\n              <Button size=\"massive\">Sample City</Button>\n            </a>\n          </div>\n          <div>\n            <a href=\"/list\" key='3'>\n              <Button size=\"massive\">Sample City</Button>\n            </a>\n          </div>\n          <div>\n            <a href=\"/list\" key='4'>\n              <Button size=\"massive\">Sample City</Button>\n            </a>\n          </div>\n          <div>\n            <a href=\"/list\">\n              <Button size=\"massive\">Sample City</Button>\n            </a>\n          </div>\n          <div>\n            <a href=\"/list\">\n              <Button size=\"massive\">Sample City</Button>\n            </a>\n          </div>\n          <div>\n            <a href=\"/list\">\n              <Button size=\"massive\">Sample City</Button>\n            </a>\n          </div>\n          <div>\n            <a href=\"/list\">\n              <Button size=\"massive\">Sample City</Button>\n            </a>\n          </div>\n          <div>\n            <a href=\"/list\">\n              <Button size=\"massive\">Sample City</Button>\n            </a>\n          </div>\n          {restaurants.map(this.renderRestaurant)}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Home\n","import React from \"react\"\n\nimport {\n  Segment,\n} from \"semantic-ui-react\"\n\n\nconst Footer = () => {\n  return (\n    <div id=\"footer\">\n        <Segment color='black'>\n            <div id='inner-footer'>\n                <h5><a href='https://fortisureit.com/'>Fortisure IT</a></h5>\n                <h5><a href='https://fortisureit.com/#contact'>Work With Us</a></h5>\n                <p>Why we do it</p>\n                <p>© 2020 fortisurefoods.com All Rights Reserved</p>\n            </div>\n        \n        </Segment>\n    </div>\n  )\n}\n\nexport default Footer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport Navigation from \"./components/Navigation\";\nimport List from \"./components/List\";\nimport Home from \"./components/Home\";\nimport Footer from \"./components/Footer\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./CSS/Grid.css\";\nimport \"./CSS/Style.css\";\nimport \"./CSS/MediaQ.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <div id=\"index\">\n      <Switch>\n        <Route path=\"/home\" component={Home} exact />\n        <Route path=\"/\" component={List} />\n      </Switch>\n      <Footer></Footer>\n    </div>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}